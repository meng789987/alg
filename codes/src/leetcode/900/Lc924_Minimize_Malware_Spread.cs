using System;
using System.Collections.Generic;
using System.Linq;

using alg;

/*
 * tags: disjointset
 * Time(n^2), Space(n)
 * if a disjoint set is infected by only one malware node, then that malware node is a candidate to remove.
 */
namespace leetcode
{
    public class Lc924_Minimize_Malware_Spread
    {
        public int MinMalwareSpread(int[][] graph, int[] initial)
        {
            int n = graph.Length;
            var ds = new DisjointSet(n);
            for (int i = 0; i < n; i++)
                for (int j = 0; j < n; j++)
                    if (graph[i][j] == 1) ds.Union(i, j);

            var infected = new int[n];
            foreach (var i in initial)
                infected[ds.Find(i)]++;

            int res = initial.Min();
            foreach (var i in initial)
            {
                if (infected[ds.Find(i)] != 1) continue;
                if (ds.Size(res) < ds.Size(i) || (ds.Size(res) == ds.Size(i) && res > i))
                    res = i;
            }

            return res;
        }

        public void Test()
        {
            var graph = new int[][] { new int[] { 1, 1, 0 }, new int[] { 1, 1, 0 }, new int[] { 0, 0, 1 } };
            var initial = new int[] { 0, 1 };
            Console.WriteLine(MinMalwareSpread(graph, initial) == 0);

            graph = new int[][] { new int[] { 1, 0, 0 }, new int[] { 0, 1, 0 }, new int[] { 0, 0, 1 } };
            initial = new int[] { 0, 2 };
            Console.WriteLine(MinMalwareSpread(graph, initial) == 0);

            graph = new int[][] { new int[] { 1, 1, 1 }, new int[] { 1, 1, 1 }, new int[] { 1, 1, 1 } };
            initial = new int[] { 2, 1 };
            Console.WriteLine(MinMalwareSpread(graph, initial) == 1);
        }
    }
}

